name: Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CMAKE_BUILD_TYPE: Debug
  BUILD_TESTS: ON

jobs:
  unit-tests:
    name: Unit Tests (CTest)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          qt6-base-dev \
          libpolkit-qt6-1-dev \
          pkg-config

    - name: Build and run unit tests
      run: |
        mkdir -p build
        cd build
        cmake .. -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug
        make -j"$(nproc)"
        make test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: build/Testing/

  static-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build container
      run: |
        docker build -t quickshell-polkit-test -f Containerfile .

    - name: Run cppcheck for security issues
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          cppcheck --enable=all --inconclusive --xml --xml-version=2 \
            --suppress=missingIncludeSystem \
            --suppress=unmatchedSuppression \
            src/ 2> cppcheck-results.xml
        "

    - name: Run clang-tidy for security patterns
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          set -e
          QT_FLAGS=\$(pkg-config --cflags Qt6Core Qt6Network Qt6Qml)
          POLKIT_FLAGS=\$(pkg-config --cflags polkit-qt6-core-1)
          for file in \$(find src/ -name '*.cpp'); do
            clang-tidy \"\$file\" -- -I src/ \$QT_FLAGS \$POLKIT_FLAGS
          done
        "

    - name: Upload static analysis results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-analysis-results
        path: |
          cppcheck-results.xml

  container-tests:
    name: All Tests (Container)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Podman
      run: |
        sudo apt-get update
        sudo apt-get install -y podman

    - name: Build and run all tests in container
      id: container_tests
      run: |
        mkdir -p build
        cd build
        cmake .. -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug
        make test-container

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-test-results
        path: |
          tests/e2e/test-results/

    - name: Test summary
      if: always()
      run: |
        echo "## Container Test Summary" >> "$GITHUB_STEP_SUMMARY"
        if [ "${{ steps.container_tests.outcome }}" == "success" ]; then
          echo "- ✅ All tests passed in container" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "- ❌ Container tests failed" >> "$GITHUB_STEP_SUMMARY"
        fi
