name: Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CMAKE_BUILD_TYPE: Debug
  BUILD_TESTS: ON

jobs:
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build container
      run: |
        docker build -t quickshell-polkit-test -f Containerfile .

    - name: Build application
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          mkdir -p build-security &&
          cd build-security &&
          cmake .. -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug
        "

    - name: Run existing unit tests
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          cd build-security &&
          make test-message-validator test-security test-simple-integration &&
          ctest --output-on-failure --tests-regex '(MessageValidator|SecurityManager|SimpleIntegration)'
        "

    - name: Run security fuzzing tests
      id: fuzzing
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          python3 tests/security/fuzz_ipc_socket.py
        "

    - name: Run permission manipulation tests
      id: permissions
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          python3 tests/security/test_permissions.py
        "

    - name: Run replay/race condition tests
      id: replay
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          python3 tests/security/test_replay_attacks.py
        "

    - name: Run rate limiting tests
      id: ratelimit
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          python3 tests/security/test_rate_limiting.py
        "

    - name: Run audit log tests
      id: auditlog
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          python3 tests/security/test_audit_logging.py
        "

    - name: Run UI confusion tests
      id: ui
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          python3 tests/security/test_ui_confusion.py
        "

    - name: Upload security test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: |
          tests/security/reports/
          build-security/test-results/

    - name: Security test summary
      if: always()
      run: |
        echo "## Security Test Summary" >> $GITHUB_STEP_SUMMARY

        if [ ${{ steps.fuzzing.outcome }} == "success" ]; then
          echo "- ✅ IPC Socket Fuzzing" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ IPC Socket Fuzzing" >> $GITHUB_STEP_SUMMARY
        fi

        if [ ${{ steps.permissions.outcome }} == "success" ]; then
          echo "- ✅ Permission Manipulation Tests" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Permission Manipulation Tests" >> $GITHUB_STEP_SUMMARY
        fi

        if [ ${{ steps.replay.outcome }} == "success" ]; then
          echo "- ✅ Replay/Race Condition Tests" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Replay/Race Condition Tests" >> $GITHUB_STEP_SUMMARY
        fi

        if [ ${{ steps.ratelimit.outcome }} == "success" ]; then
          echo "- ✅ Rate Limiting Tests" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Rate Limiting Tests" >> $GITHUB_STEP_SUMMARY
        fi

        if [ ${{ steps.auditlog.outcome }} == "success" ]; then
          echo "- ✅ Audit Log Tests" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Audit Log Tests" >> $GITHUB_STEP_SUMMARY
        fi

        if [ ${{ steps.ui.outcome }} == "success" ]; then
          echo "- ✅ UI Confusion Tests" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ UI Confusion Tests" >> $GITHUB_STEP_SUMMARY
        fi

  static-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build container
      run: |
        docker build -t quickshell-polkit-test -f Containerfile .

    - name: Run cppcheck for security issues
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          cppcheck --enable=all --inconclusive --xml --xml-version=2 \
            --suppress=missingIncludeSystem \
            --suppress=unmatchedSuppression \
            src/ 2> cppcheck-results.xml
        "

    - name: Run clang-tidy for security patterns
      run: |
        docker run --rm -v $PWD:/workspace quickshell-polkit-test bash -c "
          set -e
          for file in \$(find src/ -name '*.cpp'); do
            clang-tidy \"\$file\" -- -I src/
          done
        "

    - name: Upload static analysis results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-analysis-results
        path: |
          cppcheck-results.xml
